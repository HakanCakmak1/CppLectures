Ders 22: Static Members

Static data members:
	static int x;

	Sınıfın nesnesine ait değil
	Aslında bildiğimiz global değişken, dil katmanında sınıfa ait görünüyor

	Sınıf nesnesinin hayatıyla alakası yok nesne olmadan hayata geliyorlar

	class MyClass
	{
		static int x; 
	};
	Üstteki static int x; ifadesi definition değil sadece declaration(non-defining declaration)

	Definition yoksa compiler'da değil linker kısmında hata verir.
	Definitionda static keyword'u kullanılmamalı

	Static data members zero initialize edilir

	Static data members incomplete type olabilir
	class OtherClass;
	class MyClass
	{
		static OtherClass otherClass;
	};

	Aynı şekilde bir sınıfın kendi türünden statik veri elemanına sahip olması geçerlidir
	class MyClass
	{
		static MyClass myClass;
	};

	class MyClass
	{
	public:
		int mx;
	};
	MyClass m;
	m.mx = 5; 

	Üstteki atama geçerli

	Statik veri elemanlarının initialization'ı main çağrılmadan önce yapılır.

	int MyClass::mx{};
	şeklinde initialize edilmesi gerekiyor.

	this->mx şeklinde erişim yapılabilir.

	Ancak constuctor initializer list ile initialize edilemez.

	Old C++ dahil const static ve tam türlerinden data memberları class definition içerisinde initalize edilebilir
	(int, bool, enum)

	Static initialization fiasco static data members için de geçerli

	C++17 standardı ile global variables and static data members can be inline
	Böylece h dosyası içerisinde initialize edilebilir
	Constexpr data members are implicitly inline.

Static Member Functions:

	Static funclar aslında global function gibiler dil katmanında ayrılar
	Dolayısıyla non-static data memberdaki gibi gizli bir class referansı yok

	Global fonksiyonlardan en önemli farkları
	1) private bölüme erişebilirler
	2) isimleri class scope'da

	class MyClass
	{
		public:
		static void func();
	}

	m.func();
	p->func();
	şeklinde de çağrım yapabilir ama nesneye ait bir çağrım olmaz

	Diğer fonksiyonlarda olduğu gibi non-static member functionlarda olduğu gibi..
	declare edilip cpp içinde de define edilebilir ya da inline olarak define edilebilir

	Global fonksiyonlarda static keywordu farklı, internal linkage ile alakalı olduğu anlamına geliyor

	Static member functionlarda this keywordu geçersiz ve non-static data members'a erişim söz konusu değil

	Static member functionlarda const geçersiz

	Constant non-static member function'lar static data member'ları değiştirebilir.

	Static veri elemanına verilen ilk değer class scopeda aranır.
	int MyClass::x = foo();
	İlk olarak foo fonksiyonu class scope içerisinde aranacak.

	Static member functionlar private bölüme erişebilirler.
	static void foo()
	{
		MyClass m;
		m.func();
	}
	func private olsa bile erişim söz konusu

	Static member function ile global functionların pointer'ı tanımlandığı gibi tutulabilir.
	Non-static member functionlar için durum ayrı daha ileride görülecek.

	Static functionlar ne için kullanılır.
	1) Static data memberları döndürmek için.
	2) Named Constructor idiom 
		static Complex create_cartesian(double r, double i);
		static Complex create_polar(double distance, double angle);

Singleton:

	Pattern -> Dilden bağımsız
	Idiom -> Dile bağımlı
	Technic -> Daha kapsamlı dile bağımlı

	Singleton'a herkesin ulaşabiliyor olması lazım

	Singleton implementasyonu